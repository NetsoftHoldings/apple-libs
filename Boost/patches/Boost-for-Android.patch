diff --git a/build-android.sh b/build-android.sh
index 8b1922d..22d915d 100755
--- a/build-android.sh
+++ b/build-android.sh
@@ -83,6 +83,10 @@ boost_version()
     BOOST_VER1=1
     BOOST_VER2=65
     BOOST_VER3=1
+  elif [ "$1" = "1.58.0" ]; then
+    BOOST_VER1=1
+    BOOST_VER2=58
+    BOOST_VER3=0
   elif [ "$1" = "1.55.0" ]; then
     BOOST_VER1=1
     BOOST_VER2=55
@@ -220,7 +224,7 @@ echo "Building boost version: $BOOST_VER1.$BOOST_VER2.$BOOST_VER3"
 # Build constants
 # -----------------------
 
-BOOST_DOWNLOAD_LINK="https://boostorg.jfrog.io/artifactory/main/release/$BOOST_VER1.$BOOST_VER2.$BOOST_VER3/source/boost_${BOOST_VER1}_${BOOST_VER2}_${BOOST_VER3}.tar.bz2"
+BOOST_DOWNLOAD_LINK="http://downloads.sourceforge.net/project/boost/boost/$BOOST_VER1.$BOOST_VER2.$BOOST_VER3/boost_${BOOST_VER1}_${BOOST_VER2}_${BOOST_VER3}.tar.bz2?r=http%3A%2F%2Fsourceforge.net%2Fprojects%2Fboost%2Ffiles%2Fboost%2F${BOOST_VER1}.${BOOST_VER2}.${BOOST_VER3}%2F&ts=1291326673&use_mirror=garr"
 BOOST_TAR="boost_${BOOST_VER1}_${BOOST_VER2}_${BOOST_VER3}.tar.bz2"
 BOOST_DIR="boost_${BOOST_VER1}_${BOOST_VER2}_${BOOST_VER3}"
 BUILD_DIR="./build/"
diff --git a/configs/user-config-boost-1_58_0-arm64-v8a.jam b/configs/user-config-boost-1_58_0-arm64-v8a.jam
new file mode 100644
index 0000000..c770f44
--- /dev/null
+++ b/configs/user-config-boost-1_58_0-arm64-v8a.jam
@@ -0,0 +1,10 @@
+<compileflags>-gcc-toolchain
+<compileflags>$(AndroidNDKRoot)/toolchains/aarch64-linux-android-4.9/prebuilt/${PlatformOS}-x86_64
+<compileflags>-target
+<compileflags>aarch64-none-linux-android
+<compileflags>-fpic
+<compileflags>--sysroot
+<compileflags>$(AndroidNDKRoot)/sysroot
+<compileflags>-isystem
+<compileflags>$(AndroidNDKRoot)/sysroot/usr/include/aarch64-linux-android
+<compileflags>-D__ANDROID_API__=21
diff --git a/configs/user-config-boost-1_58_0-armeabi-v7a.jam b/configs/user-config-boost-1_58_0-armeabi-v7a.jam
new file mode 100644
index 0000000..284c21b
--- /dev/null
+++ b/configs/user-config-boost-1_58_0-armeabi-v7a.jam
@@ -0,0 +1,15 @@
+<compileflags>-gcc-toolchain
+<compileflags>$(AndroidNDKRoot)/toolchains/arm-linux-androideabi-4.9/prebuilt/${PlatformOS}-x86_64
+<compileflags>-target
+<compileflags>armv7-none-linux-androideabi15
+<compileflags>-march=armv7-a
+<compileflags>-mfloat-abi=softfp
+<compileflags>-mfpu=vfpv3-d16
+<compileflags>-mthumb
+<compileflags>-fpic
+<compileflags>-fno-integrated-as
+<compileflags>--sysroot
+<compileflags>$(AndroidNDKRoot)/sysroot
+<compileflags>-isystem
+<compileflags>$(AndroidNDKRoot)/sysroot/usr/include/arm-linux-androideabi
+<compileflags>-D__ANDROID_API__=15
diff --git a/configs/user-config-boost-1_58_0-common.jam b/configs/user-config-boost-1_58_0-common.jam
new file mode 100644
index 0000000..9bb70c1
--- /dev/null
+++ b/configs/user-config-boost-1_58_0-common.jam
@@ -0,0 +1,26 @@
+
+# --------------------------------------------------------------------
+
+using clang : %ARCH%
+:
+$(AndroidBinariesPath)/clang++
+:
+<archiver>$(AndroidBinariesPath)/llvm-ar
+<compileflags>-fexceptions
+<compileflags>-frtti
+<compileflags>-ffunction-sections
+<compileflags>-funwind-tables
+<compileflags>-fstack-protector-strong
+<compileflags>-Wno-invalid-command-line-argument
+<compileflags>-Wno-unused-command-line-argument
+<compileflags>-no-canonical-prefixes
+<compileflags>-I$(AndroidNDKRoot)/sources/cxx-stl/llvm-libc++/include
+<compileflags>-I$(AndroidNDKRoot)/sources/cxx-stl/llvm-libc++abi/include
+<compileflags>-I$(AndroidNDKRoot)/sources/android/support/include
+<compileflags>-DANDROID
+<compileflags>-Wa,--noexecstack
+<compileflags>-Wformat
+<compileflags>-Werror=format-security
+<compileflags>-DNDEBUG
+<compileflags>-O2
+<compileflags>-g
diff --git a/configs/user-config-boost-1_58_0-x86.jam b/configs/user-config-boost-1_58_0-x86.jam
new file mode 100644
index 0000000..77ae941
--- /dev/null
+++ b/configs/user-config-boost-1_58_0-x86.jam
@@ -0,0 +1,11 @@
+<compileflags>-gcc-toolchain
+<compileflags>$(AndroidNDKRoot)/toolchains/x86-4.9/prebuilt/${PlatformOS}-x86_64
+<compileflags>-target
+<compileflags>i686-none-linux-android
+<compileflags>-fPIC
+<compileflags>-mstackrealign
+<compileflags>--sysroot
+<compileflags>$(AndroidNDKRoot)/sysroot
+<compileflags>-isystem
+<compileflags>$(AndroidNDKRoot)/sysroot/usr/include/i686-linux-android
+<compileflags>-D__ANDROID_API__=15
diff --git a/configs/user-config-boost-1_58_0-x86_64.jam b/configs/user-config-boost-1_58_0-x86_64.jam
new file mode 100644
index 0000000..f100eb6
--- /dev/null
+++ b/configs/user-config-boost-1_58_0-x86_64.jam
@@ -0,0 +1,10 @@
+<compileflags>-gcc-toolchain
+<compileflags>$(AndroidNDKRoot)/toolchains/x86_64-4.9/prebuilt/${PlatformOS}-x86_64
+<compileflags>-target
+<compileflags>x86_64-none-linux-android
+<compileflags>-fPIC
+<compileflags>--sysroot
+<compileflags>$(AndroidNDKRoot)/sysroot
+<compileflags>-isystem
+<compileflags>$(AndroidNDKRoot)/sysroot/usr/include/x86_64-linux-android
+<compileflags>-D__ANDROID_API__=21
diff --git a/configs/user-config-boost-1_58_0.jam b/configs/user-config-boost-1_58_0.jam
new file mode 100644
index 0000000..0a159d9
--- /dev/null
+++ b/configs/user-config-boost-1_58_0.jam
@@ -0,0 +1,42 @@
+# Copyright 2003, 2005 Douglas Gregor
+# Copyright 2004 John Maddock
+# Copyright 2002, 2003, 2004, 2007 Vladimir Prus
+# Distributed under the Boost Software License, Version 1.0.
+# (See accompanying file LICENSE_1_0.txt or http://www.boost.org/LICENSE_1_0.txt)
+
+#   This file is used to configure your Boost.Build installation. You can modify
+# this file in place, or you can place it in a permanent location so that it
+# does not get overwritten should you get a new version of Boost.Build. See:
+#
+#   http://www.boost.org/boost-build2/doc/html/bbv2/overview/configuration.html
+#
+# for documentation about possible permanent locations.
+
+#   This file specifies which toolsets (C++ compilers), libraries, and other
+# tools are available. Often, you should be able to just uncomment existing
+# example lines and adjust them to taste. The complete list of supported tools,
+# and configuration instructions can be found at:
+#
+#   http://boost.org/boost-build2/doc/html/bbv2/reference/tools.html
+#
+
+#   This file uses Jam language syntax to describe available tools. Mostly,
+# there are 'using' lines, that contain the name of the used tools, and
+# parameters to pass to those tools -- where paremeters are separated by
+# semicolons. Important syntax notes:
+#
+#   - Both ':' and ';' must be separated from other tokens by whitespace
+#   - The '\' symbol is a quote character, so when specifying Windows paths you
+#     should use '/' or '\\' instead.
+#
+# More details about the syntax can be found at:
+#
+#   http://boost.org/boost-build2/doc/html/bbv2/advanced.html#bbv2.advanced.jam_language
+#
+# ------------------
+# Android configurations.
+# ------------------
+
+import os ;
+local AndroidNDKRoot = [ os.environ AndroidNDKRoot ] ;
+local AndroidBinariesPath = [ os.environ AndroidBinariesPath ] ;
diff --git a/configs/user-config-ndk19-1_58_0-arm64-v8a.jam b/configs/user-config-ndk19-1_58_0-arm64-v8a.jam
new file mode 100644
index 0000000..8b13789
--- /dev/null
+++ b/configs/user-config-ndk19-1_58_0-arm64-v8a.jam
@@ -0,0 +1 @@
+
diff --git a/configs/user-config-ndk19-1_58_0-armeabi-v7a.jam b/configs/user-config-ndk19-1_58_0-armeabi-v7a.jam
new file mode 100644
index 0000000..a5cfdf5
--- /dev/null
+++ b/configs/user-config-ndk19-1_58_0-armeabi-v7a.jam
@@ -0,0 +1 @@
+<compileflags>-mthumb
diff --git a/configs/user-config-ndk19-1_58_0-common.jam b/configs/user-config-ndk19-1_58_0-common.jam
new file mode 100644
index 0000000..c273300
--- /dev/null
+++ b/configs/user-config-ndk19-1_58_0-common.jam
@@ -0,0 +1,25 @@
+
+# --------------------------------------------------------------------
+
+using clang : %ARCH%
+:
+$(AndroidCompiler_%ARCH%)
+:
+<archiver>$(AndroidBinaryPrefix_%ARCH%)-ar
+<ranlib>$(AndroidBinaryPrefix_%ARCH%)-ranlib
+<compileflags>-fPIC
+<compileflags>-ffunction-sections
+<compileflags>-fdata-sections
+<compileflags>-funwind-tables
+<compileflags>-fstack-protector-strong
+<compileflags>-no-canonical-prefixes
+<compileflags>-Wformat
+<compileflags>-Werror=format-security
+<compileflags>-frtti
+<compileflags>-fexceptions
+<compileflags>-DNDEBUG
+<compileflags>-g
+<compileflags>-O2
+<compileflags>-DBOOST_SPIRIT_THREADSAFE
+<compileflags>-std=c++14
+
diff --git a/configs/user-config-ndk19-1_58_0-x86.jam b/configs/user-config-ndk19-1_58_0-x86.jam
new file mode 100644
index 0000000..8b13789
--- /dev/null
+++ b/configs/user-config-ndk19-1_58_0-x86.jam
@@ -0,0 +1 @@
+
diff --git a/configs/user-config-ndk19-1_58_0-x86_64.jam b/configs/user-config-ndk19-1_58_0-x86_64.jam
new file mode 100644
index 0000000..8b13789
--- /dev/null
+++ b/configs/user-config-ndk19-1_58_0-x86_64.jam
@@ -0,0 +1 @@
+
diff --git a/configs/user-config-ndk19-1_58_0.jam b/configs/user-config-ndk19-1_58_0.jam
new file mode 100644
index 0000000..4831329
--- /dev/null
+++ b/configs/user-config-ndk19-1_58_0.jam
@@ -0,0 +1,54 @@
+# Copyright 2003, 2005 Douglas Gregor
+# Copyright 2004 John Maddock
+# Copyright 2002, 2003, 2004, 2007 Vladimir Prus
+# Distributed under the Boost Software License, Version 1.0.
+# (See accompanying file LICENSE_1_0.txt or http://www.boost.org/LICENSE_1_0.txt)
+
+#   This file is used to configure your Boost.Build installation. You can modify
+# this file in place, or you can place it in a permanent location so that it
+# does not get overwritten should you get a new version of Boost.Build. See:
+#
+#   http://www.boost.org/boost-build2/doc/html/bbv2/overview/configuration.html
+#
+# for documentation about possible permanent locations.
+
+#   This file specifies which toolsets (C++ compilers), libraries, and other
+# tools are available. Often, you should be able to just uncomment existing
+# example lines and adjust them to taste. The complete list of supported tools,
+# and configuration instructions can be found at:
+#
+#   http://boost.org/boost-build2/doc/html/bbv2/reference/tools.html
+#
+
+#   This file uses Jam language syntax to describe available tools. Mostly,
+# there are 'using' lines, that contain the name of the used tools, and
+# parameters to pass to those tools -- where paremeters are separated by
+# semicolons. Important syntax notes:
+#
+#   - Both ':' and ';' must be separated from other tokens by whitespace
+#   - The '\' symbol is a quote character, so when specifying Windows paths you
+#     should use '/' or '\\' instead.
+#
+# More details about the syntax can be found at:
+#
+#   http://boost.org/boost-build2/doc/html/bbv2/advanced.html#bbv2.advanced.jam_language
+#
+# ------------------
+# Android configurations.
+# ------------------
+
+import os ;
+local AndroidNDKRoot = [ os.environ AndroidNDKRoot ] ;
+local AndroidBinariesPath = [ os.environ AndroidBinariesPath ] ;
+local AndroidTargetVersion32 = [ os.environ AndroidTargetVersion32 ] ;
+local AndroidTargetVersion64 = [ os.environ AndroidTargetVersion64 ] ;
+
+local AndroidCompiler_arm64v8a = $(AndroidBinariesPath)/aarch64-linux-android$(AndroidTargetVersion64)-clang++ ;
+local AndroidCompiler_armeabiv7a = $(AndroidBinariesPath)/armv7a-linux-androideabi$(AndroidTargetVersion32)-clang++ ;
+local AndroidCompiler_x86 = $(AndroidBinariesPath)/i686-linux-android$(AndroidTargetVersion32)-clang++ ;
+local AndroidCompiler_x8664 = $(AndroidBinariesPath)/x86_64-linux-android$(AndroidTargetVersion64)-clang++ ;
+
+local AndroidBinaryPrefix_arm64v8a = $(AndroidBinariesPath)/aarch64-linux-android ;
+local AndroidBinaryPrefix_armeabiv7a = $(AndroidBinariesPath)/arm-linux-androideabi ;
+local AndroidBinaryPrefix_x86 = $(AndroidBinariesPath)/i686-linux-android ;
+local AndroidBinaryPrefix_x8664 = $(AndroidBinariesPath)/x86_64-linux-android ;
diff --git a/patches/boost-1_58_0/boost-1_58_0.patch b/patches/boost-1_58_0/boost-1_58_0.patch
new file mode 100644
index 0000000..fd6575b
--- /dev/null
+++ b/patches/boost-1_58_0/boost-1_58_0.patch
@@ -0,0 +1,84 @@
+diff -u -r boost_1_55_0/boost/asio/detail/socket_types.hpp boost_1_55_0.patched/boost/asio/detail/socket_types.hpp
+--- boost_1_55_0/boost/asio/detail/socket_types.hpp
++++ boost_1_55_0.patched/boost/asio/detail/socket_types.hpp
+@@ -278,7 +278,12 @@
+ typedef int socket_type;
+ const int invalid_socket = -1;
+ const int socket_error_retval = -1;
++// @Moss - Some platforms do not define it (Android)
++#if defined(INET_ADDRSTRLEN)
+ const int max_addr_v4_str_len = INET_ADDRSTRLEN;
++#else // defined(INET_ADDRSTRLEN)
++const int max_addr_v4_str_len = 16;
++#endif // defined(INET_ADDRSTRLEN)
+ #if defined(INET6_ADDRSTRLEN)
+ const int max_addr_v6_str_len = INET6_ADDRSTRLEN + 1 + IF_NAMESIZE;
+ #else // defined(INET6_ADDRSTRLEN)
+diff -u -r boost_1_55_0/boost/asio/ip/impl/address_v6.ipp boost_1_55_0.patched/boost/asio/ip/impl/address_v6.ipp
+--- boost_1_55_0/boost/asio/ip/impl/address_v6.ipp
++++ boost_1_55_0.patched/boost/asio/ip/impl/address_v6.ipp
+@@ -11,6 +11,23 @@
+ #ifndef BOOST_ASIO_IP_IMPL_ADDRESS_V6_IPP
+ #define BOOST_ASIO_IP_IMPL_ADDRESS_V6_IPP
+ 
++// @Moss - Define IPv6 macros
++#if !defined(IN6_IS_ADDR_MULTICAST) 
++#define IN6_IS_ADDR_MULTICAST(a) (((__const uint8_t *) (a))[0] == 0xff)
++#endif
++
++#if !defined(IN6_IS_ADDR_MC_NODELOCAL)
++#define IN6_IS_ADDR_MC_NODELOCAL(a) \
++        (IN6_IS_ADDR_MULTICAST(a) \
++         && ((((__const uint8_t *) (a))[1] & 0xf) == 0x1))
++#endif
++
++#if !defined(IN6_IS_ADDR_MC_GLOBAL)
++#define IN6_IS_ADDR_MC_GLOBAL(a) \
++        (IN6_IS_ADDR_MULTICAST(a) \
++         && ((((__const uint8_t *) (a))[1] & 0xf) == 0xe))
++#endif
++
+ #if defined(_MSC_VER) && (_MSC_VER >= 1200)
+ # pragma once
+ #endif // defined(_MSC_VER) && (_MSC_VER >= 1200)
+diff -u -r boost_1_55_0/boost/config/user.hpp boost_1_55_0.patched/boost/config/user.hpp
+--- boost_1_55_0/boost/config/user.hpp
++++ boost_1_55_0.patched/boost/config/user.hpp
+@@ -13,6 +13,14 @@
+ //  configuration policy:
+ //
+ 
++// Android defines
++#define _REENTRANT 1
++#define _GLIBCXX__PTHREADS 1
++// There is problem with std::atomic on android (and some other platforms).
++// See this link for more info:
++// https://code.google.com/p/android/issues/detail?id=42735#makechanges
++#define BOOST_ASIO_DISABLE_STD_ATOMIC 1
++
+ // define this to locate a compiler config file:
+ // #define BOOST_COMPILER_CONFIG <myheader>
+ 
+diff -u -r boost_1_55_0/libs/filesystem/src/operations.cpp boost_1_55_0.patched/libs/filesystem/src/operations.cpp
+--- boost_1_55_0/libs/filesystem/src/operations.cpp
++++ boost_1_55_0.patched/libs/filesystem/src/operations.cpp
+@@ -208,7 +208,19 @@
+          || ::mkdir(to.c_str(),from_stat.st_mode)!= 0))
+ #   define BOOST_COPY_FILE(F,T,FailIfExistsBool)copy_file_api(F, T, FailIfExistsBool)
+ #   define BOOST_MOVE_FILE(OLD,NEW)(::rename(OLD, NEW)== 0)
++#if defined(__ANDROID__) || defined(ANDROID)
++    int BOOST_RESIZE_FILE(const char *path, off_t size)
++    {
++      int result = -1;
++      int fd = open(path, O_WRONLY);
++      if (fd != -1)
++        result = ftruncate(fd, size);
++      close(fd);
++      return result;
++    }
++#else
+ #   define BOOST_RESIZE_FILE(P,SZ)(::truncate(P, SZ)== 0)
++#endif
+ 
+ #   define BOOST_ERROR_NOT_SUPPORTED ENOSYS
+ #   define BOOST_ERROR_ALREADY_EXISTS EEXIST
diff --git a/patches/boost-1_58_0/clang-carwin.patch b/patches/boost-1_58_0/clang-carwin.patch
new file mode 100644
index 0000000..8c68e95
--- /dev/null
+++ b/patches/boost-1_58_0/clang-carwin.patch
@@ -0,0 +1,55 @@
+diff -urN boost_1_58_0/tools/build/src/tools/clang-darwin.jam boost_1_58_0.patched/tools/build/src/tools/clang-darwin.jam
+--- boost_1_58_0/tools/build/src/tools/clang-darwin.jam	2015-04-04 12:25:07.000000000 -0500
++++ boost_1_58_0.patched/tools/build/src/tools/clang-darwin.jam	2022-08-25 11:56:18.000000000 -0500
+@@ -67,6 +67,32 @@
+     common.handle-options clang-darwin : $(condition) : $(command) : $(options) ;
+ 
+     gcc.init-link-flags clang-darwin darwin $(condition) ;
++    
++     # - Archive builder.
++    local archiver = [ common.get-invocation-command gcc
++        : [ NORMALIZE_PATH [ MATCH "(.*)[$(nl)]+" :
++            [ SHELL "$(command-string) -print-prog-name=ar" ] ] ]
++        : [ feature.get-values <archiver> : $(options) ]
++        : $(bin)
++        : search-path ] ;
++    toolset.flags clang-darwin.archive .AR $(condition) : $(archiver[1]) ;
++    if $(.debug-configuration)
++    {
++        ECHO notice: using clang archiver :: $(condition) :: $(archiver[1]) ;
++    }
++
++    # - Ranlib.
++    local ranlib = [ common.get-invocation-command gcc
++        : [ NORMALIZE_PATH [ MATCH "(.*)[$(nl)]+" :
++            [ SHELL "$(command-string) -print-prog-name=ranlib" ] ] ]
++        : [ feature.get-values <ranlib> : $(options) ]
++        : $(bin)
++        : search-path ] ;
++    toolset.flags clang-darwin.archive .RANLIB $(condition) : $(ranlib[1]) ;
++    if $(.debug-configuration)
++    {
++        ECHO notice: using clang ranlib :: $(condition) :: $(ranlib[1]) ;
++    }
+ 
+ }
+ 
+@@ -111,7 +137,8 @@
+ # logic to set the .AR variable. We can put the same
+ # logic in clang-linux, but that's hardly worth the trouble
+ # as on Linux, 'ar' is always available.
+-.AR = ar ;
++.AR = $(archiver) ;
++.RANLIB = $(ranlib) ;
+ 
+ rule archive ( targets * : sources * : properties * )
+ {
+@@ -145,7 +172,7 @@
+ actions piecemeal archive
+ {
+   "$(.AR)" $(AROPTIONS) rc "$(<)" "$(>)"
+-  "ranlib" -cs "$(<)"
++  "$(.RANLIB)" -cs "$(<)"
+ }
+ 
+ flags clang-darwin.link USER_OPTIONS <linkflags> ;
